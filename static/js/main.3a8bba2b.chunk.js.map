{"version":3,"sources":["utils.js","App.js","index.js"],"names":["getRandomWord","words","Math","floor","random","length","toLowerCase","App","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGuessesLeft","setState","guessesLeft","state","guessedLetters","updateGameState","isGameOver","generateWordDisplay","replace","currWord","setTimeout","alert","concat","endGame","_step","wordDisplay","_iterator","_createForOfIteratorHelper","s","n","done","letter","value","includes","push","err","e","f","join","validateInput","input","currGuess","match","handleChange","event","target","handleSubmit","preventDefault","toConsumableArray","roundsWon","roundsPlayed","restartGame","inherits","createClass","key","react_default","a","createElement","className","id","class","Form","Label","htmlFor","Control","type","placeholder","onChange","Button","variant","onClick","get","React","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.3a8bba2b.chunk.js","sourcesContent":["import words from \"./words.json\";\n\nexport const getRandomWord = () => {\n  // Lowercase words for simplicity\n  return words[Math.floor(Math.random() * words.length)].toLowerCase();\n};\n","import React from \"react\";\nimport { getRandomWord } from \"./utils.js\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currWord: getRandomWord(),\n      guessedLetters: [],\n      guessesLeft: 10,\n      currGuess: \"\",\n      roundsPlayed: 0,\n      roundsWon: 0,\n    };\n  }\n\n  updateGuessesLeft = () => {\n    this.setState(\n      {\n        guessesLeft: 10 - this.state.guessedLetters.length,\n      },\n      this.updateGameState\n    );\n  };\n\n  updateGameState = () => {\n    if (this.isGameOver) {\n      if (\n        this.generateWordDisplay().replace(/ /g, \"\") !== this.state.currWord\n      ) {\n        setTimeout(() => {\n          alert(`You ran out of tries! The word is \"${this.state.currWord}\".`);\n        }, 100);\n      } else {\n        setTimeout(() => {\n          alert(\n            `Congrats on guessing it with ${10 - this.state.guessesLeft} tries!`\n          );\n        }, 100);\n      }\n      this.endGame();\n    }\n  };\n\n  generateWordDisplay = () => {\n    const wordDisplay = [];\n    for (let letter of this.state.currWord) {\n      if (this.state.guessedLetters.includes(letter)) {\n        wordDisplay.push(letter);\n      } else {\n        wordDisplay.push(\"_\");\n      }\n    }\n    return wordDisplay.join(\" \");\n  };\n\n  validateInput = () => {\n    const input = this.state.currGuess;\n    if (this.state.guessedLetters.includes(input.toLowerCase())) {\n      alert(\n        `You have already guessed \"${this.state.currGuess}\"! Try another letter.`\n      );\n      return false;\n    }\n    if (!(input.match(/^[A-Za-z]+$/) && input.length === 1)) {\n      alert(\"Please enter just one letter at a time!\");\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  get isGameOver() {\n    return !(\n      this.state.guessesLeft > 0 &&\n      this.generateWordDisplay().replace(/ /g, \"\") !== this.state.currWord\n    );\n  }\n\n  // Insert form callback functions handleChange and handleSubmit here\n\n  handleChange = (event) => {\n    this.setState({\n      currGuess: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.validateInput()) {\n      this.setState(\n        {\n          guessedLetters: [\n            ...this.state.guessedLetters,\n            this.state.currGuess.toLowerCase(),\n          ],\n          currGuess: \"\",\n        },\n        this.updateGuessesLeft\n      );\n    }\n  };\n\n  endGame = () => {\n    if (this.isGameOver) {\n      const roundsWon =\n        this.generateWordDisplay().replace(/ /g, \"\") === this.state.currWord\n          ? this.state.roundsWon + 1\n          : this.state.roundsWon;\n\n      this.setState({\n        roundsPlayed: this.state.roundsPlayed + 1,\n        roundsWon: roundsWon,\n      });\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      currWord: getRandomWord(),\n      guessedLetters: [],\n      guessesLeft: 10,\n      currGuess: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Guess The Word</h1> <br />\n          <div id=\"container\">\n            <div id=\"word-display\">{this.generateWordDisplay()}</div>\n            <div id=\"guessed-letters\">\n              Guessed Letters: <br />\n              {this.state.guessedLetters.length > 0\n                ? this.state.guessedLetters.join(\" \")\n                : \"-\"}\n            </div>\n            <div id=\"guesses-left\">\n              Guesses Left: <br />\n              {this.state.guessesLeft}\n            </div>\n          </div>\n          {!this.isGameOver && (\n            <div class=\"form\">\n              <Form.Label htmlFor=\"guess\">Guess: </Form.Label>\n              <Form.Control\n                type=\"text\"\n                id=\"guess\"\n                value={this.state.currGuess}\n                placeholder=\"e.g. 'e'\"\n                onChange={this.handleChange}\n              />\n              <Button variant=\"light\" onClick={this.handleSubmit}>\n                Submit\n              </Button>\n            </div>\n          )}\n          {this.isGameOver && (\n            <Button\n              id=\"another-round\"\n              variant=\"success\"\n              onClick={this.restartGame}\n            >\n              Another round\n            </Button>\n          )}\n          <br />\n          <div id=\"game-score\">\n            Won {this.state.roundsWon} out of {this.state.roundsPlayed} rounds\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  // strict mode makes the App render twice\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}